"""
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?



1. Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).
2. Initially, let p equal 2, the smallest prime number.
3. Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, 3p, 4p, ...; the p itself should not be marked).
4. Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let p now equal this new number (which is the next prime), and repeat from step 3.
5. When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.

"""

import unittest, math

NUMBER = 600851475143
smallPrimes = [2, 3, 5, 7]


def factors(number):
    for n in range(1, number):
        if number % n == 0:
            yield n

    
    
def primes(factors):
    for f in factors:
        if is_prime(f):
            yield f
    
#Kamil Kisiel
def count_iterable(i):
    return sum(1 for e in i)

def n_factors(number):
    return count_iterable(factors(number))

def n_prime_factors(number):
    primes = 0
    for number in factors(number):
        if is_prime(number):
            primes += 1

    return primes

def is_prime(number):
    if n_factors(number) == 1:
        return True
    else:
        return False

def largest_number(sequence):
    return max(sequence)

def largest_prime_factor(number):
    return largest_number(primes(factors(number)))

class TestFactors(unittest.TestCase):
    def test_number_of_factors(self):
        self.assertEqual(n_prime_factors(9), 1)
        self.assertEqual(n_prime_factors(87), 2)
        self.assertEqual(n_prime_factors(13195), 4)
                           
print(list(factors(100)))
